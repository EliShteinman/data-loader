@REM =============================================================================
@REM           מדריך פקודות להדגמה חיה (Windows) - OpenShift Data Loader
@REM =============================================================================
@REM מדריך זה מציג פריסה מלאה של אפליקציה ותשתית ל-OpenShift.

@REM -------------------------
@REM שלב 0: הכנות
@REM -------------------------

@REM התחברות ל-OpenShift (בצע לפני ההדגמה)
oc login --token=<your-token> --server=<your-server-url>

@REM יצירת פרויקט חדש ונקי
oc new-project my-live-demo

@REM התחברות ל-Docker Hub (בצע לפני ההדגמה)
docker login

@REM --- הגדרת משתנים ---
@REM !!! חשוב: החלף את 'your-dockerhub-username' בשם המשתמש שלך ב-Docker Hub !!!
set "DOCKERHUB_USERNAME=your-dockerhub-username"


@REM -------------------------
@REM שלב 1: בניית Docker Image
@REM -------------------------

@REM יצירת תג ייחודי להדגמה
FOR /F "tokens=*" %%g IN ('powershell -Command "Get-Date -UFormat +%%s"') DO SET "IMAGE_TAG=manual-demo-%%g"

@REM הפקודה תשתמש אוטומטית במשתנה DOCKERHUB_USERNAME שהגדרת בשלב הקודם
echo "Building and pushing image: %DOCKERHUB_USERNAME%/data-loader-service:%IMAGE_TAG%"
docker buildx build --platform linux/amd64,linux/arm64 --no-cache -t "%DOCKERHUB_USERNAME%/data-loader-service:%IMAGE_TAG%" --push ..


@REM =============================================================================
@REM         >>> שיטה א': הדרך המומלצת (דקלרטיבית עם YAML) <<<
@REM =============================================================================
@REM שיטה זו משתמשת בקבצי תצורה (מניפסטים) כדי להגדיר את המצב הרצוי של המערכת.

@REM -------------------------
@REM שלב 2 (YAML): יצירת תצורה, סודות ואחסון
@REM -------------------------
@REM כפרקטיקה מומלצת, אנו מפרידים בין תצורה כללית (ConfigMap) למידע רגיש (Secret).
oc apply -f infrastructure\k8s\00-mysql-configmap.yaml
oc apply -f infrastructure\k8s\01-mysql-secret.yaml
oc apply -f infrastructure\k8s\02-mysql-pvc.yaml
echo --- ConfigMap, Secret and PVC created.
oc get configmap,secret,pvc

@REM -------------------------
@REM שלב 3 (YAML): פריסת MySQL
@REM -------------------------
oc apply -f infrastructure\k8s\03-mysql-deployment.yaml
oc apply -f infrastructure\k8s\04-mysql-service.yaml
echo --- Waiting for MySQL pod to become ready...
oc wait --for=condition=ready pod -l app.kubernetes.io/instance=mysql-db --timeout=300s
echo --- MySQL pod is ready. Allowing time for internal database initialization...
timeout /t 15 >nul
echo --- MySQL is fully initialized!

@REM -------------------------
@REM שלב 4 (YAML): פריסת FastAPI
@REM -------------------------
@REM נפרוס את שירות ה-API. הפקודה הבאה משתמשת ב-PowerShell כדי להחליף את שם המשתמש והתג ב-YAML באופן דינמי.
powershell -Command "(Get-Content -Raw infrastructure\k8s\05-fastapi-deployment.yaml).Replace('YOUR_DOCKERHUB_USERNAME', '%DOCKERHUB_USERNAME%').Replace(':latest', ':%IMAGE_TAG%') | oc apply -f -"
oc apply -f infrastructure\k8s\06-fastapi-service.yaml
echo --- Waiting for FastAPI to be ready...
oc wait --for=condition=ready pod -l app.kubernetes.io/instance=mysql-api --timeout=300s
echo --- FastAPI is ready!

@REM -------------------------
@REM שלב 5 (YAML): חשיפת האפליקציה (Route)
@REM -------------------------
oc apply -f infrastructure\k8s\07-fastapi-route.yaml
echo --- Route created.

@REM (שיטה ב' האימפרטיבית דורשת שינויים דומים בתחביר המשתנים, אך הלוגיקה זהה)

@REM =============================================================================
@REM           >>> המשך התהליך (זהה לשתי השיטות) <<<
@REM =============================================================================

@REM -------------------------
@REM שלב 6: אתחול הנתונים ב-DB
@REM -------------------------

@REM --- שלב מקדים: מציאת ה-Pod והסיסמה ---
FOR /F "tokens=*" %%g IN ('oc get pod -l app.kubernetes.io/instance=mysql-db -o jsonpath="{.items[0].metadata.name}"') DO SET "MYSQL_POD=%%g"
echo Found MySQL Pod: %MYSQL_POD%

@REM פיענוח סיסמה עם PowerShell
FOR /F "tokens=*" %%g IN ('oc get secret mysql-db-credentials -o jsonpath="{.data.MYSQL_ROOT_PASSWORD}"') DO SET "B64_PASSWORD=%%g"
FOR /F "usebackq tokens=*" %%h IN (`powershell -NoProfile -Command "[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('%B64_PASSWORD%'))"`) DO SET "MYSQL_PASSWORD=%%h"


@REM -----------------------------------------------------------------------------------
@REM >> שיטה א': הזרמה ישירה מהמחשב המקומי (מומלץ) <<
@REM -----------------------------------------------------------------------------------
echo Running initialization using Method A (Streaming)...
oc exec -i "%MYSQL_POD%" -- mysql -u root -p"%MYSQL_PASSWORD%" mydatabase < scripts\create_data.sql
oc exec -i "%MYSQL_POD%" -- mysql -u root -p"%MYSQL_PASSWORD%" mydatabase < scripts\insert_data.sql
echo Database initialized successfully using Method A!

@REM -----------------------------------------------------------------------------------
@REM >> שלב איפוס (אופציונלי, להדגמת שיטה ב'): <<
@REM -----------------------------------------------------------------------------------
oc exec "%MYSQL_POD%" -- /bin/bash -c "mysql -u root -p'%MYSQL_PASSWORD%' -e 'DROP DATABASE IF EXISTS mydatabase; CREATE DATABASE mydatabase;'"
echo Database has been reset. Ready for Method B.

@REM (שיטה ב' של אתחול הנתונים תעבוד ללא שינוי)

@REM -------------------------
@REM שלב 7: מציאת הכתובת ובדיקה
@REM -------------------------
FOR /F "tokens=*" %%g IN ('oc get route mysql-api-route -o jsonpath="{.spec.host}"') DO SET "ROUTE_URL=%%g"
echo ======================================================
echo Application URL: https://%ROUTE_URL%
echo Data Endpoint:   https://%ROUTE_URL%/data
echo API Docs:        https://%ROUTE_URL%/docs
echo ======================================================

@REM -------------------------
@REM שלב 8: ניקוי הסביבה (בסוף ההדגמה)
@REM -------------------------
@REM (פקודות הניקוי זהות ועובדות גם ב-Windows)
echo To clean up resources created by this demo, run:
echo oc delete all --selector=app.kubernetes.io/part-of=data-loader-app
echo oc delete pvc,secret,configmap --selector=app.kubernetes.io/part-of=data-loader-app
