# =============================================================================
#           מדריך פקודות להדגמה חיה - OpenShift Data Loader
# =============================================================================

# -------------------------
# שלב 0: הכנות
# -------------------------

# התחברות ל-OpenShift (בצע לפני ההדגמה)
oc login --token=<your-token> --server=<your-server-url>

# ניקוי פרויקט קודם אם קיים
# oc delete project my-live-demo

# יצירת פרויקט חדש ונקי
oc new-project my-live-demo

# התחברות ל-Docker Hub (בצע לפני ההדגמה)
docker login


# -------------------------
# שלב 1: בניית Docker Image
# -------------------------

# החלף את <your-dockerhub-username> בשם המשתמש שלך
docker build -t <your-dockerhub-username>/data-loader-service:manual-demo .
docker push <your-dockerhub-username>/data-loader-service:manual-demo


# =============================================================================
#         >>> שיטה א': הדרך המומלצת (דקלרטיבית עם YAML) <<<
# =============================================================================

# -------------------------
# שלב 2 (YAML): יצירת Secret ו-PVC
# -------------------------
oc apply -f infrastructure/k8s/01-mysql-secret.yaml
oc apply -f infrastructure/k8s/02-mysql-pvc.yaml
echo "--- Secret and PVC created."
oc get secret,pvc

# -------------------------
# שלב 3 (YAML): פריסת MySQL
# -------------------------
oc apply -f infrastructure/k8s/03-mysql-deployment.yaml
oc apply -f infrastructure/k8s/04-mysql-service.yaml
echo "--- Waiting for MySQL to be ready..."
oc wait --for=condition=ready pod -l app=mysql-db --timeout=300s
echo "--- MySQL is ready!"

# -------------------------
# שלב 4 (YAML): פריסת FastAPI
# -------------------------
# החלף את <your-dockerhub-username> בשם המשתמש שלך
sed -e "s|YOUR_DOCKERHUB_USERNAME|<your-dockerhub-username>|g" \
    -e "s|:latest|:manual-demo|g" \
    "infrastructure/k8s/05-fastapi-deployment.yaml" | oc apply -f -
oc apply -f infrastructure/k8s/06-fastapi-service.yaml
echo "--- Waiting for FastAPI to be ready..."
oc wait --for=condition=ready pod -l app=mysql-api --timeout=300s
echo "--- FastAPI is ready!"

# -------------------------
# שלב 5 (YAML): חשיפת האפליקציה (Route)
# -------------------------
oc apply -f infrastructure/k8s/07-fastapi-route.yaml
echo "--- Route created."

# =============================================================================
#       >>> שיטה ב': הדרך החלופית (אימפרטיבית עם פקודות ישירות) <<<
#       (כדי להשתמש בשיטה זו, יש להסיר את ההערות ולהריץ כל בלוק בנפרד)
# =============================================================================

# -------------------------
# שלב 2 (אימפרטיבי): יצירת Secret ו-PVC
# -------------------------
# oc create secret generic mysql-db-credentials --from-literal=MYSQL_ROOT_PASSWORD='...' --from-literal=...
# oc apply -f infrastructure/k8s/02-mysql-pvc.yaml # (אין חלופה אימפרטיבית טובה ל-PVC)
# echo "--- Secret and PVC created."

# -------------------------
# שלב 3 (אימפרטיבי): פריסת MySQL
# -------------------------
# oc new-app mysql:8.0 --name=mysql-db
# oc set volume deployment/mysql-db --add --name=mysql-persistent-storage --type=pvc --claim-name=mysql-db-pvc --mount-path=/var/lib/mysql
# oc set env deployment/mysql-db --from=secret/mysql-db-credentials
# oc label deployment mysql-db app=mysql-db
# echo "--- Waiting for MySQL to be ready..."
# oc wait --for=condition=ready pod -l app=mysql-db --timeout=300s
# echo "--- MySQL is ready!"

# -------------------------
# שלב 4 (אימפרטיבי): פריסת FastAPI
# -------------------------
# oc create deployment mysql-api --image=<your-dockerhub-username>/data-loader-service:manual-demo
# oc label deployment mysql-api app=mysql-api
# oc expose deployment mysql-api --port=8080 --name=mysql-api-service

# --- הזרקת משתנים מ-Secret (הפקודה החסרה) ---
# oc set env deployment/mysql-api DB_HOST=mysql-db-service
# oc set env deployment/mysql-api --keys=MYSQL_DATABASE --from=secret/mysql-db-credentials --prefix=DB_
# oc set env deployment/mysql-api --keys=MYSQL_USER --from=secret/mysql-db-credentials --prefix=DB_
# oc set env deployment/mysql-api --keys=MYSQL_PASSWORD --from=secret/mysql-db-credentials --prefix=DB_
# echo "--- Waiting for FastAPI to be ready..."
# oc wait --for=condition=ready pod -l app=mysql-api --timeout=300s
# echo "--- FastAPI is ready!"

# -------------------------
# שלב 5 (אימפרטיבי): חשיפת האפליקציה (Route)
# -------------------------
# oc expose service mysql-api-service --name=mysql-api-route
# echo "--- Route created."


# =============================================================================
#           >>> המשך התהליך (זהה לשתי השיטות) <<<
# =============================================================================

# -------------------------
# שלב 6: אתחול הנתונים ב-DB
# -------------------------

# מציאת שם ה-Pod
MYSQL_POD=$(oc get pod -l app=mysql-db -o jsonpath='{.items[0].metadata.name}')
echo "Found MySQL Pod: $MYSQL_POD"

# העתקת קבצי SQL לתוך ה-Pod
oc cp scripts/create_data.sql "$MYSQL_POD":/tmp/create_data.sql
oc cp scripts/insert_data.sql "$MYSQL_POD":/tmp/insert_data.sql

# שליפת הסיסמה מה-Secret
MYSQL_PASSWORD=$(oc get secret mysql-db-credentials -o jsonpath='{.data.MYSQL_ROOT_PASSWORD}' | base64 --decode)

# הרצת הסקריפטים בתוך ה-Pod
oc exec "$MYSQL_POD" -- mysql -u root -p"$MYSQL_PASSWORD" mydatabase < scripts/create_data.sql
oc exec "$MYSQL_POD" -- mysql -u root -p"$MYSQL_PASSWORD" mydatabase < scripts/insert_data.sql
echo "Database initialized successfully!"


# -------------------------
# שלב 7: מציאת הכתובת ובדיקה
# -------------------------

ROUTE_URL=$(oc get route mysql-api-route -o jsonpath='{.spec.host}')
echo "======================================================"
echo "Application URL: http://${ROUTE_URL}"
echo "Data Endpoint:   http://${ROUTE_URL}/data"
echo "API Docs:        http://${ROUTE_URL}/docs"
echo "======================================================"


# -------------------------
# שלב 8: ניקוי הסביבה (בסוף ההדגמה)
# -------------------------

# הדרך המהירה והיסודית ביותר לנקות הכל היא למחוק את הפרויקט כולו.
echo "To clean up all resources, run: oc delete project my-live-demo"
oc delete -f infrastructure/k8s/